# Instrument driver configuration file.

[General settings]
# Created by EK 8/9/2019

# The name is shown in all the configuration windows
name: Painter Siglent DC Power Supply

# The version string should be updated whenever changes are made to this config file
version: 1.0

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.
driver_path: Painter_Siglent_DC_PowerSupply



[Model and options]
# The option section allow instruments with different options to use the same driver

# List of models supported by this driver
model_str_1: SPD1168X
model_str_2: SPD1305X
model_str_3: SPD3303X

# Check instrument model id at startup (True or False). Default is False
check_model: False

# Valid model strings returned by the instrument. Default value = model_str
# model_id_1:

# Installed options (shown as checkbox controls)

# Check instrument options at startup (True or False). Default is False
check_options: False

# If check_options is set to True, define command for getting options
option_cmd: *OPT?

# If check_options is set to True, supply valid id option strings for each option



# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False)
# If False, the driver will not perform any operations (unless there is a custom driver).
use_visa: True

# Reset the interface (not the instrument) at startup (True or False).  Default is False
reset: False

# Time (in seconds) before the timing out while waiting for an instrument response. Default is 5
timeout: 5

# Termination character used by the instrument, valid values are Auto, None, CR, LF, CR+LF.
term_char: LF

# Query instrument errors (True or False).  If True, every command sent to the device will
# be followed by an error query.  This is useful when testing new setups, but may degrade
# performance by slowing down the instrument communication.
query_instr_errors: False

# Bit mask for checking status byte errors (default is 255, include all errors)
# The bits signal the following errors:
# 0: Operation
# 1: Request control
# 2: Query error
# 3: Device error
# 4: Execution error
# 5: Command error
# 6: User request
# 7: Power on
error_bit_mask: 255

# SCPI string to be used when querying for instrument error messages
error_cmd: SYSTem:ERRor?

# Initialization commands are sent to the instrument when starting the driver
# *RST will reset the device, *CLS clears the interface
#TODO
init:

# Final commands sent to the instrument when closing the driver
final: *CLS


# Define quantities in sections. This list is a selection of allowed keywords,
# see the manual for a full list of options
#   datatype:      The datatype should be one of DOUBLE, BOOLEAN, COMBO,
#                  STRING, COMPLEX, VECTOR, VECTOR_COMPLEX, PATH or BUTTON.
#   unit:          Quantity unit
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   state_value_n: Value of "state_quant" for which the control is visible
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH
#   group:         Name of the group where the control belongs.
#   section:       Name of the section where the control belongs.

# Advanced
[Firmware Version]
datatype: STRING
section: Advanced

# Channel 1
[Ch1 - Voltage]
label: Voltage
unit: V
datatype: DOUBLE
group: Channel 1
section: Output
set_cmd: CH1:VOLTage
get_cmd: MEASure:VOLTage? CH1

[Ch1 - Current]
label: Current
unit: A
datatype: DOUBLE
group: Channel 1
section: Output
set_cmd: CH1:CURRent
get_cmd: MEASure:CURRent? CH1

[Ch1 - Output]
label: Output
datatype: COMBO
permission: WRITE
group: Channel 1
section: Output
def_value: Off
combo_def_1: Off
combo_def_2: On
cmd_def_1: OFF
cmd_def_2: ON
set_cmd: OUTPut CH1, <*>

# Channel 2
[Ch2 - Voltage]
label: Voltage
unit: V
datatype: DOUBLE
group: Channel 2
section: Output
set_cmd: CH2:VOLTage
get_cmd: MEASure:VOLTage? CH2
model_value_1: SPD3303X

[Ch2 - Current]
label: Current
unit: A
datatype: DOUBLE
group: Channel 2
section: Output
set_cmd: CH2:CURRent
get_cmd: MEASure:CURRent? CH2
model_value_1: SPD3303X

[Ch2 - Output]
label: Output
datatype: COMBO
def_value: Off
group: Channel 2
section: Output
combo_def_1: Off
combo_def_2: On
cmd_def_1: OFF
cmd_def_2: ON
set_cmd: OUTPut CH2, <*>
model_value_1: SPD3303X
